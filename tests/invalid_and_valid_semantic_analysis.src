/*

error categories
----------
keywords
scope
vector
type
index
forward-reference
expected arguments
  - add an ARG boolean field to symbol table
  - if the args are in order, just select them by scope and loop through.
  - make a routine to get the type of the argument used (if none exists)
  - check direction and the use of literals
  - check dimensions

"-", "not" - these don't make sense for char or string variables.
don't let proc names be put in expressions.

*/

program test_program is

    procedure foo_proc()
      integer foo_x;
      integer foo_y;
    begin
      // invalid - scope
      b1 := 6;
      // valid - scope
      global_int := 7;
    end procedure

    procedure bar_proc(integer a in, float b out, char c inout)
    begin
      // invalid - scope
      foo_x := 3;
    end procedure

    procedure spam_proc(integer x[10] in, bool y[5] out, char z[2] inout, string s out)
    begin
    end procedure

    integer A1[10];
    integer A2[20];
    integer A3[30];
    integer A4[10];
    bool B[5];
    char C[2];
    integer z1;

    global integer global_int;

    integer i1;
    integer i2;
    float f1;
    float f2;
    char c1;
    char c2;
    string s1;
    string s2;
    bool b1;
    bool b2;

begin

// (initial values)

A1 := 0;
A2 := 0;
A3 := 0;
A4 := 0;
z1 := 0;
i1 := 0;
i2 := 0;
f1 := 0;
f2 := 0;
c1 := '0';
c2 := '0';
s1 := "0";
s2 := "0";
b1 := false;
b2 := false;
B := 0;

// invalid - reserved keywords

//foobarspam := for + begin;
//end := program/integer;
is := float + string;

// invalid - vector

z1 := A1;
A1 := A4 + A3;

// invalid - scope
foo_x := 6;

// invalid - data types
i1 := b1*f1;
i1 := b1+b2;
b1 := f1;
c1 := c1 + c2;
c1 := s1;
s1 := i1/i2;
s1 := b1 > b2;
s1 := b1 != c2;

// invalid - index

A1[-1] := 3;
A1[true] := 4;
A1[-3.22] := 3;
A1[A1] := 2;
A1["test"] := 3;


// invalid procedure args

foo_proc(A1,i1);
bar_proc(c1, "3.14", A1);
spam_proc('c', B, A2, "test");

// valid procedure arguments

foo_proc();
bar_proc(3,f2,c2);
spam_proc(A1,B,C,s);


// valid - data types

b1 := b1 | b2 & true & false;
i1 := i1 + f1/f2 + 3.45 + i1;
b1 := false;
c1 := c2;
c1 := '4';
s1 := "TESTING";
b1 := b1 == b2;
f1 := (f1 + f2/f1 - 4)/3.4567876;

// valid - proc calls

foo_proc();
bar_proc(1,f1,c1);
spam_proc(A1,B,C,s1);


end program.
